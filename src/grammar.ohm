AsciiDoc {
  Document = DocElement* EndOfFile
  DocElement =
    | DocumentAttribute -- attr
    | Block -- block

  wrapping_attr_text = (~newline ~space_backslash any)+ space_backslash
  doc_attr_value_multi_line = wrapping_attr_text newline doc_attr_value
  doc_attr_value =
    | doc_attr_value_multi_line -- val_wrapped
    | any_non_newline_text<end> -- val
  document_attribute_key = (~":" ~space any)+
  DocumentAttribute = ":" document_attribute_key ":" doc_attr_value? newline?

  AttributeList = "[" listOf<Attribute, ","> "]"
  Attribute = AttributeNamed | AttributePositional
  AttributePositional = (~"]" ~"," any)+
  AttributeNamed = AttributePositional "=" AttributePositional

  BlockStructure<t> = BlockAnchor? BlockMetaData? t newline? newline?
  Block =
    | BlockStructure<Fence> -- blockf
    | BlockStructure<NonFencable>  -- blocknf

  BlockAnchor = "[[" anchor_id anchor_reftext?  "]]" newline
  anchor_id = (~"]" ~"," any)+
  anchor_reftext = "," (~"]]" any)*
  BlockMetaData = block_title? AttributeList newline
  block_title = "." ~space (~newline any)* newline

  NonFencable =
    | Header
    | BlockSectionSetext
    | BlockAdmonition
    | BlockQuotedParagraph
    | BlockImage
    | BlockList
    | BlockHorizontalRule
    | BlockMacro
    | BlankLine
    | BlockParagraph
    | newline

  block_exit<delim> = newline delim
  BlockContentGenericLineFull<delim> = newline? (~delim InlineElementOrText<delim>)+
  BlockContentGenericLineEmpty<delim> = (~block_exit<delim> newline)
  BlockContentGeneric<delim> = (BlockContentGenericLineFull<delim> | BlockContentGenericLineEmpty<delim>) BlockContentGeneric<delim>?

  Fencable<delim> =
  | BlockAdmonition
  | BlockTable
  | BlockContentGeneric<delim>
  // | BlockQuote -- AST only
  // | BlockComment -- AST only
  // | BlockSidebar -- AST only
  // | BlockPassthrough -- AST only

  doublequote = "\""

  BlockQuotedParagraph = doublequote BlockContentGeneric<doublequote> doublequote newline "--" (any_non_newline+)? newline

  line_element_start_probably_wrong = "="

  inlineelstart =
      | "*"  // constrained bold
      | "**"  // unconstrained Bold
      | "_"  // constrained Italics
      | "__"  // Unconstrained Italics
      | "//"  // Italic
      | "`"   // Monospace
      | "<<"  // Cross-reference start
      | "link:"  // Link start
      | "image:"  // Image start
      | "footnote:"  // Footnote start
      | "+++"  // Inline passthrough start
      | "~"   // Subscript start
      | "^"   // Superscript start
      | "{"   // Attribute reference start

  EndOfFile = newline? end  // Allow optional newline at end of file
  SingleLineText = InlineElement+ newline?

  BlockSectionSetext = line header_underline_setext BlankLine*
  header_underline_setext = (("=" | "-")+ newline) | (("=" | "-")+ end)


  Header = header_marker HeaderContent newline?
  header_marker =
  | "======"
  | "====="
  | "===="
  | "==="
  | "=="
  | "="
  HeaderContent = InlineElementOrText<newline>+

  BlockParagraph = (~line_element_start_probably_wrong) ParagraphSegment
  ParagraphSegment = InlineElementOrText<end>+ (BlankLine ParagraphSegment)?

  BlockList = UnorderedList
       | OrderedList
       | DescriptionList

  UnorderedList = UnorderedListItem+
  UnorderedListItem = unordered_list_marker ListItemContent newline?
  ListItemContent = InlineElementOrText<end>+ (ListContinuation ListItemContent+)*
  unordered_list_marker = ("*" | "-" | "â€¢")+ space+

  OrderedList = OrderedListItem+
  OrderedListItem = ol_marker ListItemContent newline?
  ol_marker_dot = ". "
  ol_marker_digits_dot = digits ol_marker_dot
  ol_marker = ol_marker_digits_dot | ol_marker_dot

  DescriptionList = DescriptionListItem+
  DescriptionListItem = description_list_term "::" description_content

  ListContinuation = "+" newline ListItemContent

  description_list_term = (~"::" any)+

  line = (~newline any)+ newline

  description_content = line+

  BlockTable = TableRow+
  TableRow = "|" TableCell ("|" TableCell)* newline
  TableCell = InlineElement+

  BlockHorizontalRule = "'''" newline

  BlockAdmonition = admonitiontype any_non_newline_text<end>
  admonitiontype = "NOTE:" | "TIP:" | "IMPORTANT:" | "WARNING:" | "CAUTION:"

  BlockMacro = macro_name "::" macro_target? AttributeList? newline
               (line | BlankLine)*
               macro_delimiter newline
  macro_name = letter+
  macro_target = (~"[" any)+

  macro_delimiter = "----"

  AttributeEntry = ":" attribute_name ":" AttributeValue? newline
  attribute_name = (~":" any)+
  AttributeValue = (~InlineElement any)*

  comment_delimiter = "////"

  InlineElement =
    | AttributeReference
    | ConstrainedBold
    | ConstrainedItalic
    | CrossReference
    | Footnote
    | InlineImage
    | InlinePassthrough
    | Link
    | MonospaceText
    | SubscriptText
    | SuperscriptText
    | UnconstrainedBold
    | UnconstrainedItalic
    | UrlMacro

  InlineElementOrText<delim> = InlineElement | any_non_newline_text<delim>

  any_non_newline_text<delim> = (~delim any_non_newline)+

  any_non_newline = (~newline (space | any))

  ConstrainedBold = "*" InlineElementOrText<"*">+ "*"
  UnconstrainedBold = "*" ConstrainedBold "*"

  UnconstrainedItalic = "_" InlineElementOrText<"_">+ "_"
  ConstrainedItalic = "_" UnconstrainedItalic "_"

  MonospaceText = "`" (~"`" any)+ "`"
  httpscheme = "https" | "http"
  url_scheme = httpscheme | "ftp" | "irc" | "mailto"
  UrlMacro = url_scheme ":" (~"[" any)+ AttributeList

  Link = "link:" url "[" link_text "]"
  url = (~"[" any)+
  link_text = (~"]" any)*

  image_url = (~"[" any)+
  image_h = digits
  image_w = digits
  ImageDims = image_w ","? image_h?
  InlineImage = "image:" image_url "[" image_alt ("," ImageDims)? "]"
  BlockImage = "image::" image_url "[" image_alt ("," ImageDims)? "]"
  image_alt = (~"]" ~"," any)*

  Footnote = "footnote:" digits? "[" footnote_text "]"
  footnote_text = (~"]" any)*

  CrossReference = "<<" CrossReferenceId CrossReferenceText? ">>"
  CrossReferenceId = (~"," ~">>" any)+
  CrossReferenceText = "," (~">>" any)*

  InlinePassthrough = "+++" (~"+++" any)+ "+++"

  SubscriptText = "~" (~"~" any)+ "~"
  SuperscriptText = "^" (~"^" any)+ "^"

  AttributeReference = "{" attribute_name "}"

  BlankLine = space* newline

  digits = digit+

  backslash = "\\"
  space_backslash = " " backslash
  newline = "\n" | "\r" | "\r\n"
  space := " " --space
    | "\t" --tab

  FenceGeneric<delim, content> = delim newline content newline delim

  table_fence_variant_1_pipe = "|==="
  table_fence_variant_2_comma = ",==="
  table_fence_variant_3_colon = ":==="
  table_fence_variant_4_bang = "!==="
  FenceTable =
    | FenceGeneric<table_fence_variant_1_pipe, Fencable<table_fence_variant_1_pipe>>
    | FenceGeneric<table_fence_variant_2_comma, Fencable<table_fence_variant_2_comma>>
    | FenceGeneric<table_fence_variant_3_colon, Fencable<table_fence_variant_3_colon>>
    | FenceGeneric<table_fence_variant_4_bang, Fencable<table_fence_variant_4_bang>>


  FenceOpen = FenceGeneric<"--", Fencable<"--">>

  FenceOfDelim4To7<delim> =
    | FenceGeneric<of_7<delim>, Fencable<of_7<delim>>> -- fenced7
    | FenceGeneric<of_6<delim>, Fencable<of_6<delim>>> -- fenced6
    | FenceGeneric<of_5<delim>, Fencable<of_5<delim>>> -- fenced5
    | FenceGeneric<of_4<delim>, Fencable<of_4<delim>>> -- fenced4

  FenceDot = FenceOfDelim4To7<".">
  FenceUnder = FenceOfDelim4To7<"_">
  FenceDash = FenceOfDelim4To7<"-">
  FenceEq = FenceOfDelim4To7<"=">
  FenceStar = FenceOfDelim4To7<"*">
  FenceSlash = FenceOfDelim4To7<"/">
  FencePlus = FenceOfDelim4To7<"+">
  Fence =
    | FenceUnder -- Under
    | FenceDot -- Dot
    | FenceDash -- Dash
    | FenceEq -- Eq
    | FenceStar -- Star
    | FenceSlash -- Slash
    | FencePlus -- Plus
    | FenceOpen -- Open
    | FenceTable -- Table

  of_2<x> = x x
  of_3<x> = x of_2<x>
  of_4<x> = x of_3<x>
  of_5<x> = x of_4<x>
  of_6<x> = x of_5<x>
  of_7<x> = x of_6<x>
  of_8<x> = x of_7<x>
}
