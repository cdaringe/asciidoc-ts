AsciiDoc {
  Document = Block* EndOfFile

  AttributeList = "[" listOf<Attribute, ","> "]"
  Attribute = AttributeNamed | AttributePositional
  AttributePositional = (~"]" ~"," any)+
  AttributeNamed = AttributePositional "=" AttributePositional

  Block = BlockAnchor? BlockMetaData? BlockKind newline? newline?
  BlockAnchor = "[[" anchorId anchorReftext?  "]]" newline
  anchorId = (~"]" ~"," any)+
  anchorReftext = "," (~"]]" any)*
  BlockMetaData = block_title? AttributeList newline
  block_title = "." ~space (~newline any)* newline
  BlockKind = Header
  | BlockHeaderSetext
  | BlockImage
  | BlockExample
  | BlockQuotedParagraph
  | BlockList
  | BlockTable
  | BlockQuote
  | BlockHorizontalRule
  | BlockAdmonition
  | BlockSidebar
  | BlockPassthrough
  | BlockMacro
  | BlockComment
  | BlockListing
  | BlockParagraph
  | InlineElementOrPlainText
  | BlankLine
  | newline

  doublequote = "\""

  BlockExample = "====" newline (~(newline "====") any)* newline "====" newline

  BlockQuotedParagraph = doublequote (~doublequote any)* doublequote newline "--" plaintext? newline
  LineElementStart = "="

  inlineelstart =
      | "*"  // constrained bold
      | "**"  // unconstrained Bold
      | "_"  // constrained Italics
      | "__"  // Unconstrained Italics
      | "//"  // Italic
      | "`"   // Monospace
      | "<<"  // Cross-reference start
      | "link:"  // Link start
      | "image:"  // Image start
      | "footnote:"  // Footnote start
      | "+++"  // Inline passthrough start
      | "~"   // Subscript start
      | "^"   // Superscript start
      | "{"   // Attribute reference start

  EndOfFile = newline? end  // Allow optional newline at end of file
  SingleLineText = InlineElement+ newline?

  BlockHeaderSetext = HeaderTextSetext HeaderUnderlineSetext BlankLine*
  HeaderTextSetext = line
  HeaderUnderlineSetext = (("=" | "-")+ newline) | (("=" | "-")+ end)


  Header = HeaderMarker HeaderContent newline?
  HeaderMarker =
  | "======"
  | "====="
  | "===="
  | "==="
  | "=="
  | "="
  HeaderContent = (~newline InlineElementOrPlainText)+

  BlockParagraph = (~LineElementStart) ParagraphSegment
  ParagraphSegment = InlineElementOrPlainText+ (BlankLine ParagraphSegment)?

  BlockList = UnorderedList
       | OrderedList
       | DescriptionList

  UnorderedList = UnorderedListItem+
  UnorderedListItem = unordered_list_marker ListItemContent newline?
  ListItemContent = InlineElementOrPlainText+ (ListContinuation ListItemContent+)*
  unordered_list_marker = ("*" | "-" | "â€¢")+ space+

  OrderedList = OrderedListItem+
  OrderedListItem = OLMarker ListItemContent newline?
  ol_marker_dot = ". "
  OLMarkerDigits = Digits ol_marker_dot
  OLMarker = OLMarkerDigits | ol_marker_dot

  DescriptionList = DescriptionListItem+
  DescriptionListItem = Term "::" DescriptionContent

  ListContinuation = "+" newline ListItemContent

  Term = (~"::" any)+

  line = (~newline any)+ newline

  DescriptionContent = line+

  BlockListing =
    | ListingBlockDelimited

  listingblockdelimiter = "----"

  ListingBlockDelimited = listingblockdelimiter newline (~listingblockdelimiter any)* listingblockdelimiter newline?

  BlockQuote = block_quote_delimiter newline
               (~block_quote_delimiter (line | BlankLine))*
               block_quote_delimiter newline
  block_quote_delimiter = "____"

  BlockTable = TableDelimiter TableAttributes? newline
          TableRow+
          TableDelimiter newline
  TableDelimiter = "|==="
  TableAttributes = "[" listOf<TableAttribute, ","> "]"
  TableAttribute = ColsAttribute | HeaderOption
  ColsAttribute = "cols" "=" Digits
  HeaderOption = "header"
  TableRow = "|" TableCell ("|" TableCell)* newline
  TableCell = InlineElement+

  BlockHorizontalRule = "'''" newline

  BlockAdmonition = AdmonitionType admonitionContent+
  admonitionContent = (~newline any)+
  AdmonitionType = "NOTE:" | "TIP:" | "IMPORTANT:" | "WARNING:" | "CAUTION:"

  BlockSidebar = SidebarDelimiter newline
            (line | BlankLine)*
            SidebarDelimiter newline
  SidebarDelimiter = "****"

  BlockPassthrough = PassthroughDelimiter newline
                     (line | BlankLine)*
                     PassthroughDelimiter newline
  PassthroughDelimiter = "++++"

  BlockMacro = MacroName "::" MacroTarget? AttributeList? newline
               (line | BlankLine)*
               MacroDelimiter newline
  MacroName = letter+
  MacroTarget = (~"[" any)+

  MacroDelimiter = "----"

  AttributeEntry = ":" AttributeName ":" AttributeValue? newline
  AttributeName = (~":" any)+
  AttributeValue = (~InlineElement any)*

  BlockComment = comment_delimiter newline
                 (~comment_delimiter any)*
                 comment_delimiter newline
  comment_delimiter = "////"

  InlineElement =
    | AttributeReference
    | ConstrainedBold
    | ConstrainedItalic
    | CrossReference
    | Footnote
    | InlineImage
    | InlinePassthrough
    | Link
    | MonospaceText
    | SubscriptText
    | SuperscriptText
    | UnconstrainedBold
    | UnconstrainedItalic
    | UrlMacro

  InlineElementOrPlainText = InlineElement | plaintext

  plaintext = (~inlineelstart ~newline ~httpscheme any)+

  ConstrainedBold = "*" (~"*" InlineElementOrPlainText)+ "*"
  UnconstrainedBold = "*" ConstrainedBold "*"

  UnconstrainedItalic = "_" (~"_" InlineElementOrPlainText)+ "_"
  ConstrainedItalic = "_" UnconstrainedItalic "_"

  MonospaceText = "`" (~"`" any)+ "`"
  httpscheme = "https" | "http"
  UrlMacroScheme = httpscheme | "ftp" | "irc" | "mailto"
  UrlMacro = UrlMacroScheme ":" (~"[" any)+ AttributeList

  Link = "link:" Url "[" LinkText "]"
  Url = (~"[" any)+
  LinkText = (~"]" any)*

  ImageUrl = (~"[" any)+
  ImageH = Digits
  ImageW = Digits
  ImageDims = ImageW ","? ImageH?
  InlineImage = "image:" ImageUrl "[" ImageAlt ("," ImageDims)? "]"
  BlockImage = "image::" ImageUrl "[" ImageAlt ("," ImageDims)? "]"
  ImageAlt = (~"]" ~"," any)*

  Footnote = "footnote:" FootnoteId? "[" FootnoteText "]"
  FootnoteId = Digits
  FootnoteText = (~"]" any)*

  CrossReference = "<<" CrossReferenceId CrossReferenceText? ">>"
  CrossReferenceId = (~"," ~">>" any)+
  CrossReferenceText = "," (~">>" any)*

  InlinePassthrough = "+++" (~"+++" any)+ "+++"

  SubscriptText = "~" (~"~" any)+ "~"
  SuperscriptText = "^" (~"^" any)+ "^"

  AttributeReference = "{" AttributeName "}"

  BlankLine = space* newline

  Digits = digit+

  newline = "\n" | "\r" | "\r\n"
  space := " " --space
    | "\t" --tab
}
